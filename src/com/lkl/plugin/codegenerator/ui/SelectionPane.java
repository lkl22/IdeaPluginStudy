package com.lkl.plugin.codegenerator.ui;

import com.intellij.openapi.ui.Messages;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.lkl.plugin.codegenerator.config.ClassSelectionConfig;
import com.lkl.plugin.codegenerator.config.MemberSelectionConfig;
import com.lkl.plugin.codegenerator.config.PipelineStep;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class SelectionPane implements PipelineStepConfig {
    private JTextField postfixText;
    private JCheckBox enableStepCheckBox;
    private JButton removeThisStepButton;
    private JPanel topPanel;
    private JScrollPane contentPane;

    private Object selectionPane;

    public SelectionPane(PipelineStep config, TemplateEditPane parent) {
        postfixText.setText(config.postfix());
        enableStepCheckBox.setSelected(config.enabled());

        removeThisStepButton.addActionListener(e -> {
            int result = Messages.showYesNoDialog("Really remove this step?", "Delete", null);
            if (result == Messages.OK) {
                parent.removePipelineStep(this);
            }
        });

        PipelineStepConfig pane = null;
        if (config instanceof MemberSelectionConfig) {
            pane = new MemberSelectionPane((MemberSelectionConfig) config);
        } else if (config instanceof ClassSelectionConfig) {
            pane = new ClassSelectionPane((ClassSelectionConfig) config);
        }
        contentPane.setViewportView(pane.getComponent());
        selectionPane = pane;
    }

    public String postfix() {
        return postfixText.getText();
    }

    public boolean enabled() {
        return enableStepCheckBox.isSelected();
    }

    @Override
    public PipelineStep getConfig() {
        if (selectionPane instanceof MemberSelectionPane) {
            PipelineStep step = ((MemberSelectionPane) selectionPane).getConfig();
            step.postfix(this.postfix());
            step.enabled(this.enabled());
            return step;
        } else if (selectionPane instanceof ClassSelectionPane) {
            PipelineStep step = ((ClassSelectionPane) selectionPane).getConfig();
            step.postfix(this.postfix());
            step.enabled(this.enabled());
            return step;
        }
        return null;
    }

    public String type() {
        if (selectionPane instanceof MemberSelectionPane) {
            return "member";
        } else if (selectionPane instanceof ClassSelectionPane) {
            return "class";
        }
        return "";
    }

    @Override
    public JComponent getComponent() {
        return topPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPanel = new JPanel();
        topPanel.setLayout(new GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Step Postfix");
        topPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        topPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        postfixText = new JTextField();
        topPanel.add(postfixText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        contentPane = new JScrollPane();
        topPanel.add(contentPane, new GridConstraints(1, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(300, 200), null, 0, false));
        contentPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        enableStepCheckBox = new JCheckBox();
        enableStepCheckBox.setText("Enable Step");
        topPanel.add(enableStepCheckBox, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeThisStepButton = new JButton();
        removeThisStepButton.setText("Remove This Step");
        topPanel.add(removeThisStepButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPanel;
    }
}
