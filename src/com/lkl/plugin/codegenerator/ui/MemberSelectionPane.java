package com.lkl.plugin.codegenerator.ui;

import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorFactory;
import com.intellij.openapi.fileTypes.FileTypeManager;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.lkl.plugin.codegenerator.config.MemberSelectionConfig;
import com.lkl.plugin.codegenerator.config.PipelineStep;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class MemberSelectionPane implements PipelineStepConfig {
    private JPanel editorPane;
    private JCheckBox excludeConstantFieldsCheckBox;
    private JCheckBox excludeStaticFieldsCheckBox;
    private JCheckBox excludeTransientFieldsCheckBox;
    private JCheckBox excludeEnumFieldsCheckBox;
    private JCheckBox excludeLoggerFieldsLog4jCheckBox;
    private JTextField excludeFieldsNameText;
    private JTextField excludeFieldsByTypeText;
    private JTextField excludeMethodsByNameText;
    private JTextField excludeMethodsByTypeText;
    private JCheckBox enableMethodSelectionCheckBox;
    private JComboBox comboBoxSortElements;
    private JCheckBox sortElementsCheckBox;
    private JPanel topPane;
    private JCheckBox allowMultipleSelectionCheckBox;
    private JCheckBox allowEmptySelectionCheckBox;
    private Editor editor;

    MemberSelectionPane(MemberSelectionConfig config) {
        excludeConstantFieldsCheckBox.setSelected(config.filterConstantField);
        excludeStaticFieldsCheckBox.setSelected(config.filterStaticModifier);
        excludeTransientFieldsCheckBox.setSelected(config.filterTransientModifier);
        excludeEnumFieldsCheckBox.setSelected(config.filterEnumField);
        excludeLoggerFieldsLog4jCheckBox.setSelected(config.filterLoggers);
        excludeFieldsNameText.setText(config.filterFieldName);
        excludeFieldsByTypeText.setText(config.filterFieldType);
        excludeMethodsByNameText.setText(config.filterMethodName);
        excludeMethodsByTypeText.setText(config.filterMethodType);
        enableMethodSelectionCheckBox.setSelected(config.enableMethods);
        sortElementsCheckBox.addItemListener(e -> comboBoxSortElements.setEnabled(sortElementsCheckBox.isSelected()));
        comboBoxSortElements.setSelectedIndex(config.sortElements - 1);
        sortElementsCheckBox.setSelected(config.sortElements != 0);
        allowEmptySelectionCheckBox.setSelected(config.allowEmptySelection);
        allowMultipleSelectionCheckBox.setSelected(config.allowMultiSelection);

        addVmEditor(config.providerTemplate);
    }

    private int sortElements() {
        if (!sortElementsCheckBox.isSelected()) {
            return 0;
        }
        return comboBoxSortElements.getSelectedIndex() + 1;
    }

    private void addVmEditor(String template) {
        EditorFactory factory = EditorFactory.getInstance();
        Document velocityTemplate = factory.createDocument(template);
        editor = factory.createEditor(velocityTemplate, null, FileTypeManager.getInstance()
                .getFileTypeByExtension("vm"), false);
        GridConstraints constraints = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(0, 0), null, 0, true);

        editorPane.add(editor.getComponent(), constraints);
    }

    @Override
    public PipelineStep getConfig() {
        MemberSelectionConfig config = new MemberSelectionConfig();
        config.filterConstantField = excludeConstantFieldsCheckBox.isSelected();
        config.filterEnumField = excludeEnumFieldsCheckBox.isSelected();
        config.filterTransientModifier = excludeTransientFieldsCheckBox.isSelected();
        config.filterStaticModifier = excludeStaticFieldsCheckBox.isSelected();
        config.filterLoggers = excludeLoggerFieldsLog4jCheckBox.isSelected();
        config.filterFieldName = excludeFieldsNameText.getText();
        config.filterFieldType = excludeFieldsByTypeText.getText();
        config.filterMethodName = excludeMethodsByNameText.getText();
        config.filterMethodType = excludeMethodsByTypeText.getText();
        config.enableMethods = enableMethodSelectionCheckBox.isSelected();
        config.providerTemplate = editor.getDocument().getText();
        config.allowEmptySelection = allowEmptySelectionCheckBox.isSelected();
        config.allowMultiSelection = allowMultipleSelectionCheckBox.isSelected();
        config.sortElements = sortElements();
        return config;
    }

    public JComponent getComponent() {
        return topPane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPane = new JPanel();
        topPane.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        editorPane = new JPanel();
        editorPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        topPane.add(editorPane, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(-1, 200), null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(10, 3, new Insets(0, 0, 0, 0), -1, -1));
        topPane.add(panel1, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Excludes", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        excludeConstantFieldsCheckBox = new JCheckBox();
        excludeConstantFieldsCheckBox.setText("Exclude Constant Fields");
        panel1.add(excludeConstantFieldsCheckBox, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(9, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        excludeStaticFieldsCheckBox = new JCheckBox();
        excludeStaticFieldsCheckBox.setText("Exclude Static Fields");
        panel1.add(excludeStaticFieldsCheckBox, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        excludeTransientFieldsCheckBox = new JCheckBox();
        excludeTransientFieldsCheckBox.setText("Exclude Transient Fields");
        panel1.add(excludeTransientFieldsCheckBox, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        excludeEnumFieldsCheckBox = new JCheckBox();
        excludeEnumFieldsCheckBox.setText("Exclude enum fields");
        panel1.add(excludeEnumFieldsCheckBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        excludeLoggerFieldsLog4jCheckBox = new JCheckBox();
        excludeLoggerFieldsLog4jCheckBox.setText("Exclude logger fields (Log4j, JDK Loging, Jakarta Commons Logging)");
        panel1.add(excludeLoggerFieldsLog4jCheckBox, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Exclude Fields by name (regexp)");
        panel1.add(label1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Exclude Fields by type name (regexp)");
        panel1.add(label2, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Exclude Methods by name (regexp)");
        panel1.add(label3, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Exclude Methods by return type name (regexp)");
        panel1.add(label4, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        excludeFieldsNameText = new JTextField();
        panel1.add(excludeFieldsNameText, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        excludeFieldsByTypeText = new JTextField();
        panel1.add(excludeFieldsByTypeText, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        excludeMethodsByNameText = new JTextField();
        panel1.add(excludeMethodsByNameText, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        excludeMethodsByTypeText = new JTextField();
        panel1.add(excludeMethodsByTypeText, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer3 = new Spacer();
        topPane.add(spacer3, new GridConstraints(6, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        enableMethodSelectionCheckBox = new JCheckBox();
        enableMethodSelectionCheckBox.setText("Enable Method Selection");
        topPane.add(enableMethodSelectionCheckBox, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sortElementsCheckBox = new JCheckBox();
        sortElementsCheckBox.setText("Sort Elements");
        topPane.add(sortElementsCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(226, 20), null, 0, false));
        comboBoxSortElements = new JComboBox();
        comboBoxSortElements.setEnabled(false);
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Asc");
        defaultComboBoxModel1.addElement("Dsc");
        comboBoxSortElements.setModel(defaultComboBoxModel1);
        comboBoxSortElements.setSelectedIndex(1);
        topPane.add(comboBoxSortElements, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(183, 26), null, 0, false));
        allowMultipleSelectionCheckBox = new JCheckBox();
        allowMultipleSelectionCheckBox.setText("Allow Multiple Selection");
        topPane.add(allowMultipleSelectionCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        allowEmptySelectionCheckBox = new JCheckBox();
        allowEmptySelectionCheckBox.setText("Allow Empty Selection");
        allowEmptySelectionCheckBox.setToolTipText("If disabled and no members are provided, the generation process will exit.");
        topPane.add(allowEmptySelectionCheckBox, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPane;
    }
}
